1. Imprimimos componentes lexicos por pantalla
2. Documentacion: es fundamental
3. Se identifican por numeros 
    definiciones.h
    Convencion de salida <300, package> | <300, "package"> analizador lexico
    El analizador sintactico solo imprime

4. Tenemos un analizador sintactico y un analizador lexico y el programa fuente en go
Todo modulo de nuestro compilador va a implementarse con dos ficheros, un .c y un .h
El .c contiene la implementacion, mientras que el .h contiene la interfaz.

Comprobar que compila en Ubuntu

5. Struct con campo para entero y valor para representar los componentes lexicos

Tokenizar concurrentSum.go
Palabras reservadas -> un numero por cada una
Strings
Identificadores
Comentarios -> (Identificarlos y no devolverlos)

El analizador lexico debe buscar los lexemas en la tabla de simbolos
Recibe el valor y devuelve el componente lexico 

Desarrollar prototipo verital ->
Varias fases en la que cada una hay una logica de procesamiento

Fichero main > 3 actividades a desarrollar
- 1 -> inicializar estructuras de datos 
- 2 -> analizador sintactico
- 3 -> fase de limpieza de memoria

Modulo de errores, que permite identificar errores sencillos.

El consumo de recursos tiene que ser minimo (Usar la menor cantidad de memoria posible, y lo mas rapido posible)

########### DIA 2 #################

/ Cargar tabla de simbolos en la inicialzacion
funcion inicializar se invoca desde el main, esta declarada en TablaSimbolos. 

Se declara la tabla de simbolos como una estructura privada dentro de su fichero, y solo se accede a ella por sus funciones de acceso

isAlpha / isAlphaNum

para reconocer palabras>
 switch / case que itera sobre los caracteres, cambiando estados mediante entradas (funcion de transicion)
 modularizar para cada automata especifico

 0b0x3 -> error lexico o sintactico 

 ######### DIA 3

 el analizador lexico va pidiendo CARACTERES! :
 El analizador lexico tiene que reconocer las cadenas bien formadas de las expresiones regulares del lenguaje

 hay que asegurar que la lectura se realiza de forma eficiente. El sistema de entrada dialoga con el sistema operativo, 


 la principal estructura de datos es el doble buffer.

 2 buffers :
 Bloque A - se carga en el bloque A el primer trozo del codigo fuente. El tamaño maximo del lexema está limitado por el tamaño del bloque.
 Siempre que se da una medida de rendimiento, se evalúa en el peor caso.

 Para el doble buffer>
 puntero inicio marca el inicio del lexema
 Puntero delantero que marca el siguiente caracter

 Por cada caracter : fin bloque A, fin bloque B, fin de fichero? -> EOF para fin de cada bloque

 Hay que inicializar el sistema de entrada, abriendo el archivo en el main. Esos dos arrays se tienen que implementar en el .c como una
 estructura de datos privada

 #  https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fread?view=msvc-170

cuando se comprueba que el lexema 

comprobar si en un bloque que se quiere cargar esta el inicio, otra opcion es comprobar cuantos caracteres se piden

una vez aceptada una cadena, es posible leer desde el inicio al final (mejor rendimiento ???)

hay que tener en cuenta el retroceso de un caracter

# checkear con valgrind https://valgrind.org/

TODO>
Gestion de errores
Analizador lexico, numeros
repasar tama;o de buffers